<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1453710883542">{:repl-history {:ide [], :local [&quot;(use '(incanter core charts))\n(view (function-plot sin -10 10))&quot; &quot;(correl)&quot; &quot;(first points)&quot; &quot;(map #(take 3 %) points)&quot; &quot;(correlation (map #(take 3 %) points) (map second points))&quot; &quot;(map last points)&quot; &quot;(simple-regression (map last points)\n                   (map #(take 3 %) points) )&quot; &quot;(sample-model-params (map last points)\n                   (map #(take 3 %) points) )&quot; &quot;sample-model-params &quot; &quot;(bootstrap (map last points)\n                   (map #(take 3 %) points) )&quot; &quot;(t-test (first points) :y (last points))&quot; &quot;(t-test (second points) :y (last points))&quot; &quot;(t-test (third points) :y (last points))&quot; &quot;(t-test (take 3 points) :y (last points))&quot; &quot;(t-test (map #(take 3 %) points) :y (last points))&quot; &quot;(linear-model (last points) (map #(take 3 %) points))&quot; &quot;(last points)&quot; &quot;(linear-model (map last points) (map #(take 3 %) points))&quot; &quot;(keys res)&quot; &quot;(:f-stat res)&quot; &quot;(pp/pprint res)&quot; &quot;(linear-model (map last points) (map #(take 2 %) points))&quot; &quot;(def res *1)&quot; &quot;(:rotogrinder-events p)&quot; &quot;(first (filter #(= \&quot;1/23/16\&quot; (:game-date %)) (:rotogrinder-events p)))&quot; &quot;(take-last 2 \n           (sort-by :game-epoch\n          (filter #(= true (home-game %)) (:rotogrinder-events p))))&quot; &quot;(take-last 2 \n           (sort-by :game-epoch\n            (filter #(= true (:home-game %)) (:rotogrinder-events p))))&quot; &quot;(:t-probs res)&quot; &quot;(:coefs res)&quot; &quot;(:f-test res)&quot; &quot;(:f-prob res)&quot; &quot;p&quot; &quot;(def rotogrinder-events (:rotogrinder-events p))&quot; &quot;(filter #(= (:home-game event-23) (:home-game %)) rotogrinder-events)&quot; &quot;(filter #(= true (:home-game %)) rotogrinder-events)&quot; &quot;(filter #(= false (:home-game %)) rotogrinder-events)&quot; &quot;(sort-by :game-epoch (filter #(= false (:home-game %)) rotogrinder-events))&quot; &quot;(take-last 2 (sort-by :game-epoch (filter #(= false (:home-game %)) rotogrinder-events)))&quot; &quot;(take-last 2 (sort-by :game-epoch (filter #(= true (:home-game %)) rotogrinder-events)))&quot; &quot;(prepare-data-for-regression)&quot; &quot;(def points (create-array-for-regression (filter-23 (prepare-data-for-regression db))))&quot; &quot;show&quot; &quot;rotogrinder-events&quot; &quot;(first (mc/find-maps db c/*collection* {}))&quot; &quot;(def p (first (mc/find-maps db c/*collection* {})))&quot; &quot;(sort-by :game-epoch rotogrinder-events)&quot; &quot;(map :game-epoch (:rotogrinder-events (mc/find-maps db c/*collection* {})))&quot; &quot;(:Name p)&quot; &quot;(mc/remove db c/*collection* )&quot; &quot;(ns rz.scrap.rotogrinder)&quot; &quot;(ingest-data)&quot; &quot;(ns rz.model.linear)&quot; &quot;(def rotogrinder-events (:rotogrinder-events (first (mc/find-maps db c/*collection* {}))))&quot; &quot;(sort-by :game-epoch\n         (filter #(= (:home-game event-23) (:home-game %)) rotogrinder-events))&quot; &quot;(sort-by :game-epoch\n         (filter #(= true (:home-game %)) rotogrinder-events))&quot; &quot;(map first points)&quot; &quot;(mean (map first points))&quot; &quot;(but-last (sort-by :game-epoch rotogrinder-events))&quot; &quot;(butlast (sort-by :game-epoch rotogrinder-events))&quot; &quot;(map :draftking-fpts (butlast (sort-by :game-epoch rotogrinder-events)))&quot; &quot;(mean (map :draftking-fpts (butlast (sort-by :game-epoch rotogrinder-events))))&quot; &quot;(mean (map (comp read-string :draftking-fpts) (butlast (sort-by :game-epoch rotogrinder-events))))&quot; &quot;(mc/find-maps db c/*collection* {:NAME \&quot;Noah Vonleh\&quot;})&quot; &quot;(mc/find-maps db c/*collection* {:Name \&quot;Noah Vonleh\&quot;})&quot; &quot;(:rotogrinder-events (mc/find-maps db c/*collection* {:Name \&quot;Noah Vonleh\&quot;}))&quot; &quot;(:rotogrinder-events (mc/find-one-as-map db c/*collection* {:Name \&quot;Noah Vonleh\&quot;}))&quot; &quot;(mean (map (comp nil-&gt;zero :draftking-fpts) (butlast (sort-by :game-epoch rotogrinder-events))))&quot; &quot;(mean (map (comp nil-&gt;zero :draftking-fpts)\n           (butlast (sort-by :game-epoch\n                             (filter #(= (:home-game event-23) (:home-game %)) rotogrinder-events)))))&quot; &quot;(mean (map (comp nil-&gt;zero :draftking-fpts)\n           (butlast (sort-by :game-epoch\n                             (filter #(= false (:home-game %)) rotogrinder-events)))))&quot; &quot;(def rotogrinder-events (:rotogrinder-events (mc/find-one-as-map db c/*collection* {:Name \&quot;Noah Vonleh\&quot;})))&quot; &quot;(def d prepare-data-for-regression)&quot; &quot;d&quot; &quot;(:rotogrinder-events (mc/find-one-as-map db c/*collection* {:Name \&quot;Jordan Adams\&quot;}))&quot; &quot;(def rotogrinder-events (:rotogrinder-events (mc/find-one-as-map db c/*collection* {:Name \&quot;Jordan Adams\&quot;})))&quot; &quot;(array-&gt;mean (map (comp nil-&gt;zero :draftking-fpts)\n                  (butlast (sort-by :game-epoch\n                                    (filter #(= (:home-game event-23) (:home-game %)) rotogrinder-events)))))&quot; &quot;(first (filter #(= \&quot;1/23/16\&quot; (:game-date %)) rotogrinder-events))&quot; &quot;(def d (prepare-data-for-regression db))&quot; &quot;(filter-23 (prepare-data-for-regression db))&quot; &quot;(map  :avg-last-10-games-same (filter-23 (prepare-data-for-regression db)))&quot; &quot;avg-10-games-pts&quot; &quot;points&quot; &quot;(prepare-data-for-regression db)&quot; &quot;(do (prepare-data-for-regression db)\n    false) &quot; &quot;(create-array-for-regression (filter-23 (prepare-data-for-regression db)))&quot; &quot;(mc/find-maps db c/*collection* {})&quot; &quot;(keys (first player))&quot; &quot;(keys (first players))&quot; &quot;(teamAbbrev (first players))&quot; &quot;(:teamAbbrev (first players))&quot; &quot;(map :teamAbbrev players)&quot; &quot;(set (map :teamAbbrev players))&quot; &quot;(rz.scrap.rotogrinder/get-rotogrinder-data)&quot; &quot;`&quot; &quot;(def players (mc/find-maps db c/*collection* {}))&quot; &quot;(first players)&quot; &quot;(doall\n  (for [[id name] [[18937 \&quot;Karl-Anthony Towns\&quot;]\n                   [16800 \&quot;Michael Carter-Williams\&quot;]\n                   [16869 \&quot;Kentavious Caldwell-Pope\&quot;]\n                   [1279 \&quot;Al-Farouq Aminu\&quot;]\n                   [18951 \&quot;Willie Cauley-Stein\&quot;]\n                   [31805 \&quot;Bryce Dejean-Jones\&quot;]\n                   [13896 \&quot;Michael Kidd-Gilchrist\&quot;]\n                   [18951 \&quot;Cauley-Stein\&quot;]]]\n    (mc/update db c/*collection* {:Name name}\n               (assoc (mc/find-one-as-map db c/*collection* {:Name name})\n                 :rotogrinder-id id))))&quot; &quot;(:rotogrinder-events (first players))&quot; &quot;(:Name (first players))&quot; &quot;(rz.scrap.rotogrinder/get-rotogrinder-data db)&quot; &quot;(:rotogrinder-events (first (mc/find-maps db c/*collection* {})))&quot; &quot;(create-model)&quot;], :remote []}}</component>
</project>