<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1453920090809">{:repl-history {:ide [], :local [&quot;(but-last (sort-by :game-epoch rotogrinder-events))&quot; &quot;(butlast (sort-by :game-epoch rotogrinder-events))&quot; &quot;(map :draftking-fpts (butlast (sort-by :game-epoch rotogrinder-events)))&quot; &quot;(mean (map :draftking-fpts (butlast (sort-by :game-epoch rotogrinder-events))))&quot; &quot;(mean (map (comp read-string :draftking-fpts) (butlast (sort-by :game-epoch rotogrinder-events))))&quot; &quot;(mc/find-maps db c/*collection* {:NAME \&quot;Noah Vonleh\&quot;})&quot; &quot;(mc/find-maps db c/*collection* {:Name \&quot;Noah Vonleh\&quot;})&quot; &quot;(:rotogrinder-events (mc/find-maps db c/*collection* {:Name \&quot;Noah Vonleh\&quot;}))&quot; &quot;(:rotogrinder-events (mc/find-one-as-map db c/*collection* {:Name \&quot;Noah Vonleh\&quot;}))&quot; &quot;(mean (map (comp nil-&gt;zero :draftking-fpts) (butlast (sort-by :game-epoch rotogrinder-events))))&quot; &quot;(mean (map (comp nil-&gt;zero :draftking-fpts)\n           (butlast (sort-by :game-epoch\n                             (filter #(= (:home-game event-23) (:home-game %)) rotogrinder-events)))))&quot; &quot;(mean (map (comp nil-&gt;zero :draftking-fpts)\n           (butlast (sort-by :game-epoch\n                             (filter #(= false (:home-game %)) rotogrinder-events)))))&quot; &quot;(def rotogrinder-events (:rotogrinder-events (mc/find-one-as-map db c/*collection* {:Name \&quot;Noah Vonleh\&quot;})))&quot; &quot;(def d prepare-data-for-regression)&quot; &quot;d&quot; &quot;(:rotogrinder-events (mc/find-one-as-map db c/*collection* {:Name \&quot;Jordan Adams\&quot;}))&quot; &quot;(def rotogrinder-events (:rotogrinder-events (mc/find-one-as-map db c/*collection* {:Name \&quot;Jordan Adams\&quot;})))&quot; &quot;(array-&gt;mean (map (comp nil-&gt;zero :draftking-fpts)\n                  (butlast (sort-by :game-epoch\n                                    (filter #(= (:home-game event-23) (:home-game %)) rotogrinder-events)))))&quot; &quot;(first (filter #(= \&quot;1/23/16\&quot; (:game-date %)) rotogrinder-events))&quot; &quot;(def d (prepare-data-for-regression db))&quot; &quot;(filter-23 (prepare-data-for-regression db))&quot; &quot;(map  :avg-last-10-games-same (filter-23 (prepare-data-for-regression db)))&quot; &quot;avg-10-games-pts&quot; &quot;(prepare-data-for-regression db)&quot; &quot;(do (prepare-data-for-regression db)\n    false) &quot; &quot;(mc/find-maps db c/*collection* {})&quot; &quot;(keys (first player))&quot; &quot;(keys (first players))&quot; &quot;(teamAbbrev (first players))&quot; &quot;(:teamAbbrev (first players))&quot; &quot;(map :teamAbbrev players)&quot; &quot;(set (map :teamAbbrev players))&quot; &quot;(rz.scrap.rotogrinder/get-rotogrinder-data)&quot; &quot;`&quot; &quot;(def players (mc/find-maps db c/*collection* {}))&quot; &quot;(first players)&quot; &quot;(doall\n  (for [[id name] [[18937 \&quot;Karl-Anthony Towns\&quot;]\n                   [16800 \&quot;Michael Carter-Williams\&quot;]\n                   [16869 \&quot;Kentavious Caldwell-Pope\&quot;]\n                   [1279 \&quot;Al-Farouq Aminu\&quot;]\n                   [18951 \&quot;Willie Cauley-Stein\&quot;]\n                   [31805 \&quot;Bryce Dejean-Jones\&quot;]\n                   [13896 \&quot;Michael Kidd-Gilchrist\&quot;]\n                   [18951 \&quot;Cauley-Stein\&quot;]]]\n    (mc/update db c/*collection* {:Name name}\n               (assoc (mc/find-one-as-map db c/*collection* {:Name name})\n                 :rotogrinder-id id))))&quot; &quot;(:rotogrinder-events (first players))&quot; &quot;(:Name (first players))&quot; &quot;(rz.scrap.rotogrinder/get-rotogrinder-data db)&quot; &quot;(:rotogrinder-events (first (mc/find-maps db c/*collection* {})))&quot; &quot;ingest-data&quot; &quot; rz.scrap.rotogrinder/ingest-data&quot; &quot;(+ 2 2 )&quot; &quot;(ns rz.scrap.rotogrinder)&quot; &quot;(ingest-data)&quot; &quot;(ns rz.model.linear)&quot; &quot;(def db (utils/get-db))&quot; &quot;(create-array-for-regression (filter-23 (prepare-data-for-regression db)))&quot; &quot;(use '(incanter core charts datasets))&quot; &quot;(scatter-plot (map first points) (map last points) :legend true)&quot; &quot;(view *1)&quot; &quot;(scatter-plot (map #(nth % 1) points) (map last points) :legend true)&quot; &quot;(view (scatter-plot (map #(nth % 1) points) (map last points) :legend true))&quot; &quot;(view (scatter-plot (map #(nth % 2) points) (map last points) :legend true))&quot; &quot;(scatter-plot (map #(nth % 0) points) (map last points) :legend true)&quot; &quot;(view (scatter-plot (map #(nth % 0) points) (map last points) :legend true))&quot; &quot;(view (scatter-plot (map #(nth % 0) points) (map #(nth % 3) points) :legend true))&quot; &quot;(view (scatter-plot (map #(nth % 0) points) (map #(nth % 4) points) :legend true))&quot; &quot;(view (scatter-plot (map #(nth % 3) points) (map #(nth % 4) points) :legend true))&quot; &quot;(count (create-array-for-regression (filter-23 (prepare-data-for-regression db))))&quot; &quot;(count points)&quot; &quot;(count (first points))&quot; &quot;(dec (count (first points)))&quot; &quot;(correlation (map first points) (map second points))&quot; &quot;points&quot; &quot;(correlation (map #(take % 0) points) (map #(take % 2) points))&quot; &quot;(correlation (map #(take % 0) points) (map #(take % 1) points))&quot; &quot;(correlation (map #(nth % 0) points) (map #(nth % 1) points))&quot; &quot;(correlation (map #(nth % 0) points) (map #(nth % 2) points))&quot; &quot;(correlation (map #(nth % 0) points) (map #(nth % 3) points))&quot; &quot;(correlation (map #(nth % 0) points) (map #(nth % 4) points))&quot; &quot;(correlation (map #(nth % 0) points) (map #(nth % 5) points))&quot; &quot;(correlation (map #(nth % 0) points) (map #(nth % 6) points))&quot; &quot;(correlation (map #(nth % 0) points) (map #(nth % 7) points))&quot; &quot;(correlation (map #(nth % 1) points) (map #(nth % 2) points))&quot; &quot;(correlation (map #(nth % 1) points) (map #(nth % 3) points))&quot; &quot;(correlation (map #(nth % 1) points) (map #(nth % 4) points))&quot; &quot;(correlation (map #(nth % 1) points) (map #(nth % 5) points))&quot; &quot;(correlation (map #(nth % 1) points) (map #(nth % 6) points))&quot; &quot;(correlation (map #(nth % 1) points) (map #(nth % 7) points))&quot; &quot;(correlation (map #(nth % 2) points) (map #(nth % 3) points))&quot; &quot;(correlation (map #(nth % 2) points) (map #(nth % 4) points))&quot; &quot;(correlation (map #(nth % 2) points) (map #(nth % 5) points))&quot; &quot;(correlation (map #(nth % 2) points) (map #(nth % 6) points))&quot; &quot;(correlation (map #(nth % 3) points) (map #(nth % 4) points))&quot; &quot;(correlation (map #(nth % 3) points) (map #(nth % 5) points))&quot; &quot;(correlation (map #(nth % 3) points) (map #(nth % 6) points))&quot; &quot;(correlation (map #(nth % 4) points) (map #(nth % 5) points))&quot; &quot;(correlation (map #(nth % 4) points) (map #(nth % 6) points))&quot; &quot;(correlation (map #(nth % 5) points) (map #(nth % 6) points))&quot; &quot;(points (create-array-for-regression (filter-23 (prepare-data-for-regression db))))&quot; &quot;(draw-data)&quot; &quot;(draw-data db)&quot; &quot;(def points (create-array-for-regression (filter-23 (prepare-data-for-regression db))))&quot; &quot;(map #(list (first %) (last %)) points)&quot; &quot;(create-model)&quot; &quot;(create-model db)&quot; &quot;(ns rz.optimizers.coinmp)&quot; &quot;(data/add-linear-projection (utils/get-db) (data/init-players-data-draftking))&quot; &quot;(lpsolve-solve-draftkings)&quot;], :remote []}}</component>
</project>