<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1453687496570">{:repl-history {:ide [], :local [&quot;(::rotogrinder-id (mc/find-maps db *collection* {}))&quot; &quot;(:rotogrinder-id (mc/find-maps db *collection* {}))&quot; &quot;(map :rotogrinder-id (mc/find-maps db *collection* {}))&quot; &quot;(filter nil? (map :rotogrinder-id (mc/find-maps db *collection* {})))&quot; &quot;(map #(str (:rotogrinder-id %) (:Name  %)) (mc/find-maps db *collection* {}))&quot; &quot;(map #(str (:rotogrinder-id %) \&quot; \&quot; (:Name  %)) (mc/find-maps db *collection* {}))&quot; &quot;(mc/find-maps db *collection* {}))&quot; &quot;(for [[id name] [[18937 \&quot;Karl-Anthony Towns\&quot;]\n                 [16800 \&quot;Michael Carter-Williams\&quot;]\n                 [16869 \&quot;Kentavious Caldwell-Pope\&quot;]\n                 [1279 \&quot;Al-Farouq Aminu\&quot;]\n                 [18951 \&quot;Al-Farouq Aminu\&quot;]\n                 [31805 \&quot;Bryce Dejean-Jones\&quot;]\n                 [13896 \&quot;Michael Kidd-Gilchrist\&quot;]\n                 [18951 \&quot;Cauley-Stein\&quot;]]]\n  (mc/update db *collection* {:Name name}\n             (assoc (mc/find-one-as-map db *collection* {:Name name})\n               :rotogrinder-id id)))&quot; &quot;(def data (utils/fetch-url \&quot;https://rotogrinders.com/players/willie-cauley-stein-18951\&quot;))&quot; &quot;data&quot; &quot;(utils/fetch-url \&quot;https://rotogrinders.com/players/18951/stats?range=this-season\&quot;)&quot; &quot;(def ret *1)&quot; &quot;(keys ret)&quot; &quot;(count ret)&quot; &quot;(first ret)&quot; &quot;(keys (first ret))&quot; &quot;(html/select [:body] ret)&quot; &quot;(html/select [] ret)&quot; &quot;(html/select [root] ret)&quot; &quot;(-&gt; ret first :content)&quot; &quot;(-&gt; ret first :content first :content )&quot; &quot;(-&gt; ret first :content first :content first)&quot; &quot;(-&gt; ret first :content first :content first json/read-str)&quot; &quot;(def data *1 )&quot; &quot;(count data)&quot; &quot;(first data)&quot; &quot;(keys *1)&quot; &quot;(-&gt; data first first)&quot; &quot;(-&gt; data first count)&quot; &quot;(-&gt; data first second)&quot; &quot;(map (fn [event-id event-info]\n       {:event-id event-id}) data )&quot; &quot;(map (fn [event-id event-info]\n       {:event-id event-id}) \n     data )&quot; &quot;(type data)&quot; &quot;(keys data)&quot; &quot;(map (fn [[event-id event-info]]\n       {:event-id event-id}) \n     data )&quot; &quot;(map (fn [[event-id {:keys [data]}]]\n       {:event-id event-id}) \n     data )&quot; &quot;(def stats-data data)&quot; &quot;(map (fn [[event-id {:keys [data]}]]\n       {:event-id event-id}) \n     stats-data )&quot; &quot;(map (fn [[event-id {:keys [data]}]]\n       (let [{:keys [player fantasy_points stats]} data] \n         {:event-id event-id})) \n     stats-data )&quot; &quot;(map (fn [[event-id {:keys [data]}]]\n       (let [{:keys [player fantasy_points stats]} data] \n         {:event-id event-id\n          :fpts (:collection fanatast_points)\n          })) \n     stats-data )&quot; &quot;(map (fn [[event-id {:keys [data]}]]\n       (let [{:keys [player fantasy_points stats]} data] \n         {:event-id event-id\n          :fpts (:collection fanatasy_points)\n          })) \n     stats-data )&quot; &quot;(json/read-str (-&gt; ret first :content first :content first) :key-fn keyword) &quot; &quot;(def stats-data (json/read-str (-&gt; ret first :content first :content first) :key-fn keyword)) &quot; &quot;(map (fn [[event-id {:keys [data]}]]\n       (let [{:keys [player fantasy_points stats]} data] \n         {:event-id event-id\n          :fpts (:collection fantasy_points)\n          })) \n     stats-data )&quot; &quot;(map (fn [[event-id {:keys [data]}]]\n       (let [{:keys [player fantasy_points stats]} data\n             {:keys [collection]} stats\n             dk-stats (filter (fn [[cid cdata]] ) collection)] \n         {:event-id event-id\n          :fpts (:collection fantasy_points)\n          })) \n     stats-data )&quot; &quot;(second (first stats-data))&quot; &quot;(keys (second (first stats-data)))&quot; &quot;(:data (second (first stats-data)))&quot; &quot;(keys (:data (second (first stats-data))))&quot; &quot;(:fantasy_points (keys (:data (second (first stats-data)))))&quot; &quot;(:fantasy_points (:data (second (first stats-data))))&quot; &quot;(keys (:fantasy_points (:data (second (first stats-data)))))&quot; &quot;(first (:collection (:fantasy_points (:data (second (first stats-data))))))&quot; &quot;(val (first (:collection (:fantasy_points (:data (second (first stats-data)))))))&quot; &quot;(:data (val (first (:collection (:fantasy_points (:data (second (first stats-data))))))))&quot; &quot;(-&gt; (first (:collection (:fantasy_points (:data (second (first stats-data))))))) :data)&quot; &quot;(-&gt; (first (:collection (:fantasy_points (:data (second (first stats-data)))))) keys)&quot; &quot;(-&gt; (first (:collection (:fantasy_points (:data (second (first stats-data)))))) )&quot; &quot;(-&gt; (first (:collection (:fantasy_points (:data (second (first stats-data)))))) second :data)&quot; &quot;(-&gt; (first (:collection (:fantasy_points (:data (second (first stats-data)))))) second :data :site_id)&quot; &quot;(map (fn [[event-id {:keys [data]}]]\n       (let [{:keys [player fantasy_points stats]} data\n             {:keys [collection]} stats\n             dk-stats (filter #(= \&quot;20\&quot; (-&gt; % second :data :site_id)) collection)] \n         {:event-id event-id\n          :fpts (:collection fantasy_points)\n          })) \n     stats-data )&quot; &quot;(map (fn [[event-id {:keys [data]}]]\n       (let [{:keys [player fantasy_points stats]} data\n             {:keys [collection]} stats\n             dk-stats (filter #(= \&quot;20\&quot; (-&gt; % second :data :site_id)) collection)] \n         {:event-id event-id\n          :fpts dk-stats\n          })) \n     stats-data )&quot; &quot;(map (fn [[event-id {:keys [data]}]]\n       (let [{:keys [player fantasy_points stats]} data\n             {:keys [collection]} stats\n             dk-stats (filter #(= \&quot;20\&quot; (-&gt; % second :data :site_id)) collection)] \n         {:event-id event-id\n          :fpts (map (-&gt; % second :data :site_id) collection)\n          })) \n     stats-data )&quot; &quot;(map (fn [[event-id {:keys [data]}]]\n       (let [{:keys [player fantasy_points stats]} data\n             {:keys [collection]} stats\n             dk-stats (filter #(= \&quot;20\&quot; (-&gt; % second :data :site_id)) collection)] \n         {:event-id event-id\n          :fpts (map #(-&gt; % second :data :site_id) collection)\n          })) \n     stats-data )&quot; &quot;(map (fn [[event-id {:keys [data]}]]\n       (let [{:keys [player fantasy_points stats]} data\n             {:keys [collection]} stats\n             dk-stats (filter #(= \&quot;20\&quot; (-&gt; % second :data :site_id)) collection)] \n         {:event-id event-id\n          :fpts (map #(-&gt; % second) collection)\n          })) \n     stats-data )&quot; &quot;(map (fn [[event-id {:keys [data]}]]\n       (let [{:keys [player fantasy_points stats]} data\n             {:keys [collection]} stats\n             dk-stats (filter #(= \&quot;20\&quot; (-&gt; % second :data :site_id)) collection)] \n         {:event-id event-id\n          :fpts (map #(-&gt; % ) collection)\n          })) \n     stats-data )&quot; &quot;(map (fn [[event-id {:keys [data]}]]\n       (let [{:keys [player fantasy_points stats]} data\n             {:keys [collection]} stats\n             dk-stats (filter #(= \&quot;20\&quot; (-&gt; % second :data :site_id)) collection)] \n         {:event-id event-id\n          :fpts  collection\n          })) \n     stats-data )&quot; &quot;(map (fn [[event-id {:keys [data]}]]\n       (let [{:keys [player fantasy_points stats]} data\n             {:keys [collection]} fantasy_points\n             dk-stats (filter #(= \&quot;20\&quot; (-&gt; % second :data :site_id)) collection)] \n         {:event-id event-id\n          :fpts  collection\n          })) \n     stats-data )&quot; &quot;(map (fn [[event-id {:keys [data]}]]\n       (let [{:keys [player fantasy_points stats]} data\n             {:keys [collection]} fantasy_points\n             dk-stats (filter #(= \&quot;20\&quot; (-&gt; % second :data :site_id)) collection)] \n         {:event-id event-id\n          :fpts  dk-stats\n          })) \n     stats-data )&quot; &quot;(map (fn [[event-id {:keys [data]}]]\n       (let [{:keys [player fantasy_points stats]} data\n             {:keys [collection]} fantasy_points\n             dk-stats (filter #(= \&quot;20\&quot; (-&gt; % second :data :site_id)) collection)\n             fpts (-&gt; dk-stats second :data :value)] \n         {:event-id event-id\n          :fpts  dk-stats\n          })) \n     stats-data )&quot; &quot;(map (fn [[event-id {:keys [data]}]]\n       (let [{:keys [player fantasy_points stats]} data\n             {:keys [collection]} fantasy_points\n             dk-stats (filter #(= \&quot;20\&quot; (-&gt; % second :data :site_id)) collection)\n             fpts (-&gt; dk-stats second :data :value)] \n         {:event-id event-id\n          :fpts  fpts\n          })) \n     stats-data )&quot; &quot;(map (fn [[event-id {:keys [data]}]]\n       (let [{:keys [player fantasy_points stats]} data\n             {:keys [collection]} fantasy_points\n             dk-stats (filter #(= \&quot;20\&quot; (-&gt; % second :data :site_id)) collection)\n             fpts (-&gt; dk-stats second :data :value)] \n         {:event-id event-id\n          :fpts  (-&gt; dk-stats second :data)\n          })) \n     stats-data )&quot; &quot;(map (fn [[event-id {:keys [data]}]]\n       (let [{:keys [player fantasy_points stats]} data\n             {:keys [collection]} fantasy_points\n             dk-stats (filter #(= \&quot;20\&quot; (-&gt; % second :data :site_id)) collection)\n             fpts (-&gt; dk-stats second :data :value)] \n         {:event-id event-id\n          :fpts  (-&gt; dk-stats second)\n          })) \n     stats-data )&quot; &quot;(map (fn [[event-id {:keys [data]}]]\n       (let [{:keys [player fantasy_points stats]} data\n             {:keys [collection]} fantasy_points\n             dk-stats (filter #(= \&quot;20\&quot; (-&gt; % second :data :site_id)) collection)\n             fpts (-&gt; dk-stats second :data :value)] \n         {:event-id event-id\n          :fpts  dk-stats \n          })) \n     stats-data )&quot; &quot;(map (fn [[event-id {:keys [data]}]]\n       (let [{:keys [player fantasy_points stats]} data\n             {:keys [collection]} fantasy_points\n             dk-stats (first (filter #(= \&quot;20\&quot; (-&gt; % second :data :site_id)) collection))\n             fpts (-&gt; dk-stats second :data :value)] \n         {:event-id event-id\n          :fpts  dk-stats \n          })) \n     stats-data )&quot; &quot;(map (fn [[event-id {:keys [data]}]]\n       (let [{:keys [player fantasy_points stats]} data\n             {:keys [collection]} fantasy_points\n             dk-stats (first (filter #(= \&quot;20\&quot; (-&gt; % second :data :site_id)) collection))\n             fpts (-&gt; dk-stats second :data :value)] \n         {:event-id event-id\n          :fpts  (-&gt; dk-stats second :data :value)]\n          })) \n     stats-data )&quot; &quot;(map (fn [[event-id {:keys [data]}]]\n       (let [{:keys [player fantasy_points stats]} data\n             {:keys [collection]} fantasy_points\n             dk-stats (first (filter #(= \&quot;20\&quot; (-&gt; % second :data :site_id)) collection))\n             fpts (-&gt; dk-stats second :data :value)] \n         {:event-id event-id\n          :fpts  (-&gt; dk-stats second :data :value)\n          })) \n     stats-data )&quot; &quot;(map (fn [[event-id {:keys [data]}]]\n       (let [{:keys [player fantasy_points stats]} data\n             {:keys [collection]} fantasy_points\n             dk-stats (first (filter #(= \&quot;20\&quot; (-&gt; % second :data :site_id)) collection))\n             fpts (-&gt; dk-stats second :data :value)] \n         {:event-id event-id\n          :fpts  (-&gt; dk-stats second :data)\n          })) \n     stats-data )&quot; &quot;(map (fn [[event-id {:keys [data]}]]\n       (let [{:keys [player fantasy_points stats]} data\n             {:keys [collection]} fantasy_points\n             dk-stats (first (filter #(= \&quot;20\&quot; (-&gt; % second :data :site_id)) collection))\n             fpts (-&gt; dk-stats second :data :value)\n             ] \n         {:event-id event-id\n          :fpts fpts\n          :game-date (-&gt; dk-stats )\n          })) \n     stats-data )&quot; &quot;(map (fn [[event-id {:keys [data]}]]\n       (let [{:keys [player fantasy_points stats schedule]} data\n             {:keys [collection]} fantasy_points\n             dk-stats (first (filter #(= \&quot;20\&quot; (-&gt; % second :data :site_id)) collection))\n             fpts (-&gt; dk-stats second :data :value)\n             ] \n         {:event-id event-id\n          :fpts fpts\n          :game-date (-&gt; schedule :data :time)\n          })) \n     stats-data )&quot; &quot;(map (fn [[event-id {:keys [data]}]]\n       (let [{:keys [player fantasy_points stats schedule]} data\n             {:keys [collection]} fantasy_points\n             dk-stats (first (filter #(= \&quot;20\&quot; (-&gt; % second :data :site_id)) collection))\n             fpts (-&gt; dk-stats second :data :value)\n             ] \n         {:event-id event-id\n          :fpts fpts\n          :game-timestamp (-&gt; schedule :data :time)\n          :game-date (first (string/split (-&gt; schedule :data :time) #\&quot; \&quot;))\n          \n          })) \n     stats-data )&quot; &quot;(map (fn [[event-id {:keys [data]}]]\n       (let [{:keys [player fantasy_points stats schedule team_id]} data\n             {:keys [collection]} fantasy_points\n             dk-stats (first (filter #(= \&quot;20\&quot; (-&gt; % second :data :site_id)) collection))\n             fpts (-&gt; dk-stats second :data :value)\n             ] \n         {:event-id event-id\n          :fpts fpts\n          :game-timestamp (-&gt; schedule :data :time)\n          :game-date (first (string/split (-&gt; schedule :data :time) #\&quot; \&quot;))\n          :team team_id\n          })) \n     stats-data )&quot; &quot;(map (fn [[event-id {:keys [data]}]]\n       (let [{:keys [player fantasy_points stats schedule team_id]} data\n             {:keys [collection]} fantasy_points\n             home-team-id (-&gt; schedule :data :team_home :data :id)\n             away-team-id (-&gt; schedule :data :team_away :data :id)\n             dk-stats (first (filter #(= \&quot;20\&quot; (-&gt; % second :data :site_id)) collection))\n             fpts (-&gt; dk-stats second :data :value)\n             ] \n         {:event-id event-id\n          :fpts fpts\n          :game-timestamp (-&gt; schedule :data :time)\n          :game-date (first (string/split (-&gt; schedule :data :time) #\&quot; \&quot;))\n          :team team_id \n          :home-game (= team_id home-team-id)\n          })) \n     stats-data )&quot; &quot;(map (fn [[event-id {:keys [data]}]]\n       (let [{:keys [player fantasy_points stats schedule team_id]} data\n             {:keys [collection]} fantasy_points\n             home-team-id (-&gt; schedule :data :team_home :data :id)\n             away-team-id (-&gt; schedule :data :team_away :data :id)\n             dk-stats (first (filter #(= \&quot;20\&quot; (-&gt; % second :data :site_id)) collection))\n             fpts (-&gt; dk-stats second :data :value)\n             ] \n         {:event-id event-id\n          :fpts fpts\n          :game-timestamp (-&gt; schedule :data :time)\n          :game-date (first (string/split (-&gt; schedule :data :time) #\&quot; \&quot;))\n          :team team_id\n          :home-team home-team-id\n          :away-team away-team-id\n          :home-game (= team_id home-team-id)\n          })) \n     stats-data )&quot; &quot;(map (fn [[event-id {:keys [data]}]]\n       (let [{:keys [player fantasy_points stats schedule team_id]} data\n             {:keys [collection]} fantasy_points\n             team_id (read-string team_id)\n             home-team-id (-&gt; schedule :data :team_home :data :id)\n             away-team-id (-&gt; schedule :data :team_away :data :id)\n             dk-stats (first (filter #(= \&quot;20\&quot; (-&gt; % second :data :site_id)) collection))\n             fpts (-&gt; dk-stats second :data :value)\n             ] \n         {:event-id event-id\n          :fpts fpts\n          :game-timestamp (-&gt; schedule :data :time)\n          :game-date (first (string/split (-&gt; schedule :data :time) #\&quot; \&quot;))\n          :team team_id\n          :home-team home-team-id\n          :away-team away-team-id\n          :home-game (= team_id home-team-id)\n          })) \n     stats-data )&quot; &quot;(map (fn [[event-id {:keys [data]}]]\n       (let [{:keys [player fantasy_points stats schedule team_id]} data\n             {:keys [collection]} fantasy_points\n             team_id (read-string team_id)\n             home-team-id (-&gt; schedule :data :team_home :data :id)\n             away-team-id (-&gt; schedule :data :team_away :data :id)\n             dk-stats (first (filter #(= \&quot;20\&quot; (-&gt; % second :data :site_id)) collection))\n             fpts (-&gt; dk-stats second :data :value)\n             ] \n         {:event-id event-id\n          :fpts fpts\n          :game-timestamp (-&gt; schedule :data :time)\n          :game-date (first (string/split (-&gt; schedule :data :time) #\&quot; \&quot;))\n          :team team_id\n          :home-game (= team_id home-team-id)\n          })) \n     stats-data )&quot; &quot;(mc/find-one-as-map db *collection* {:rotogrinder-id 18937})&quot; &quot;(mc/find-maps db *collection* {:rotogrinder-id 18937})&quot; &quot;(count (mc/find-maps db *collection* {:rotogrinder-id 18937}))&quot; &quot;(map :_id (mc/find-maps db *collection* {:rotogrinder-id 18937}))&quot; &quot;(mc/remove db *collection* {:rotogrinder-id 18937 :Name nil})&quot; &quot;(map :_id (mc/find-maps db *collection* {:rotogrinder-id 18937 :Name nil}))&quot; &quot;(mc/find-maps db *collection* {:rotogrinder-events nil})&quot; &quot;(mc/find-maps db *collection* {:rotogrinder-id nil})&quot; &quot;(get-rotogrinder-id-name)&quot; &quot;(get-rotogrinder-data)&quot; &quot;(use '(incanter core stats charts))&quot; &quot;(use '(incanter core charts))&quot; &quot;(view (function-plot sin -10 10))&quot; &quot;(function-plot sin -10 10)&quot; &quot;(use '(incanter core charts))\n(view (function-plot sin -10 10))&quot;], :remote []}}</component>
</project>