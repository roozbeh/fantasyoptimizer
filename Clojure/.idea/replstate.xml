<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1454265195132">{:repl-history {:ide [], :local [&quot;(filter #(&gt; 3000 (nth % 4)) points)&quot; &quot;(map #(nth % 4) (filter #(&gt; 3000 (nth % 4)) points))&quot; &quot;(filter #(= 0 (nth % 4)) points)&quot; &quot;(map data (model/prepare-data (utils/get-db) c/*draftking*))&quot; &quot;(def data (model/prepare-data (utils/get-db) c/*draftking*))&quot; &quot;(first data)&quot; &quot;(linear/create-model db c/*draftking* (map :Name players-data))&quot; &quot;(linear/create-model db c/*draftking*)&quot; &quot;(let [points (create-array-for-regression (model/prepare-data (utils/get-db) c/*draftking*))\n      x (map first points)\n      actual (map last points)] \n  (view (charts/scatter-plot x actual :legend true)))&quot; &quot;(let [points (create-array-for-regression (model/prepare-data (utils/get-db) c/*draftking*))\n      x (map #(nth % 4) points)\n      actual (map last points)] \n  (view (charts/scatter-plot x actual :legend true)))&quot; &quot;(let [points (create-array-for-regression (model/prepare-data (utils/get-db) c/*draftking* (data/init-players-data-draftking)))\n      x (map #(nth % 4) points)\n      actual (map last points)] \n  (view (charts/scatter-plot x actual :legend true)))&quot; &quot;(create-array-for-regression (model/prepare-data (utils/get-db) c/*draftking* (data/init-players-data-draftking)))&quot; &quot;(let [names (map :Name (data/init-players-data-draftking))\n      points (create-array-for-regression (model/prepare-data (utils/get-db) c/*draftking* names))\n      x (map #(nth % 4) points)\n      actual (map last points)] \n  (view (charts/scatter-plot x actual :legend true)))&quot; &quot;(def data (model/prepare-data (utils/get-db) c/*draftking* (map :Name (data/init-players-data-draftking))))&quot; &quot;(filter #(= 0 (:cur-salary %)) data)&quot; &quot;(map :Name (filter #(= 0 (:cur-salary %)) data))&quot; &quot;(let [names (map :Name (data/init-players-data-draftking))\n      points (create-array-for-regression (model/prepare-data (utils/get-db) c/*draftking* names))\n      x (map #(nth % 4) points)\n      actual (map last points)] \n  ;(view (charts/scatter-plot x actual :legend true))\n  )&quot; &quot;(mc/find-maps db c/*collection* {:Name \&quot;Josh Smith\&quot;})&quot; &quot;(filter #(= 0 (:cur-salary %)) (model/prepare-data (utils/get-db) c/*draftking* (map :Name (data/init-players-data-draftking))))&quot; &quot;(filter #(= 0 (:cur-salary %)) (filter-23 (model/prepare-data (utils/get-db) c/*draftking* (map :Name (data/init-players-data-draftking)))))&quot; &quot;(filter #(= 0 (:cur-salary %)) (model/filter-23 (model/prepare-data (utils/get-db) c/*draftking* (map :Name (data/init-players-data-draftking)))))&quot; &quot;(let [names (map :Name (data/init-players-data-draftking))\n      points (create-array-for-regression (model/prepare-data (utils/get-db) c/*draftking* names))\n      x (map #(nth % 4) points)\n      actual (map last points)]\n  (count points)\n  ;(view (charts/scatter-plot x actual :legend true))\n  )&quot; &quot;(filter #(= 0 (:avg-salary %)) (model/filter-23 (model/prepare-data (utils/get-db) c/*draftking* (map :Name (data/init-players-data-draftking)))))&quot; &quot;(filter #(&lt; 1000 (:avg-salary %)) (model/filter-23 (model/prepare-data (utils/get-db) c/*draftking* (map :Name (data/init-players-data-draftking)))))&quot; &quot;(count (filter #(&lt; 1000 (:avg-salary %)) (model/filter-23 (model/prepare-data (utils/get-db) c/*draftking* (map :Name (data/init-players-data-draftking))))))&quot; &quot;(count (model/filter-23 (model/prepare-data (utils/get-db) c/*draftking* (map :Name (data/init-players-data-draftking)))))&quot; &quot;(count (filter #(&gt; 1000 (:avg-salary %)) (model/filter-23 (model/prepare-data (utils/get-db) c/*draftking* (map :Name (data/init-players-data-draftking))))))&quot; &quot;(count (:rotogrinder-events (mc/find-maps db c/*collection* {:Name \&quot;Joe Young\&quot;})))&quot; &quot;(count (:rotogrinder-events (mc/find-one-as-map db c/*collection* {:Name \&quot;Joe Young\&quot;})))&quot; &quot;(map :dk-salary (:rotogrinder-events (mc/find-one-as-map db c/*collection* {:Name \&quot;Joe Young\&quot;})))&quot; &quot;(:rotogrinder-events (mc/find-one-as-map db c/*collection* {:Name \&quot;Joe Young\&quot;}))&quot; &quot;(:rotogrinder-id (mc/find-one-as-map db c/*collection* {:Name \&quot;Joe Young\&quot;}))&quot; &quot;(:team-name (mc/find-one-as-map db c/*collection* {:Name \&quot;Joe Young\&quot;}))&quot; &quot;(:team-id (mc/find-one-as-map db c/*collection* {:Name \&quot;Joe Young\&quot;}))&quot; &quot;(keys (mc/find-one-as-map db c/*collection* {:Name \&quot;Joe Young\&quot;}))&quot; &quot;(def db (utils/get-db))&quot; &quot;(mc/remove db c/*collection* {:Name \&quot;Joe Young\&quot;})&quot; &quot;(mc/find-one-as-map db c/*collection* {:Name \&quot;Joe Young\&quot;})&quot; &quot;(mc/remove db c/*collection* {:Name \&quot;Glenn Robinson III\&quot;})&quot; &quot;(rotoscrap/ingest-data (data/init-players-data-draftking))&quot; &quot;(mc/find-one-as-map db c/*collection* {:Name \&quot;Glenn Robinson III\&quot;})&quot; &quot;(map :Name (filter #(&gt; 1000 (:avg-salary %)) (model/filter-23 (model/prepare-data (utils/get-db) c/*draftking* (map :Name (data/init-players-data-draftking))))))&quot; &quot;(map :Name (filter #(&gt; 1000 (:last-salary %)) (model/filter-23 (model/prepare-data (utils/get-db) c/*draftking* (map :Name (data/init-players-data-draftking))))))&quot; &quot;(map :Name (filter #(&gt; 1000 (:avg-salary %)) (model/filter-23 (model/prepare-data (utils/get-db) c/*draftking*))))&quot; &quot;(ns rz.model.linear)&quot; &quot;(let [names (map :Name (data/init-players-data-draftking))\n      points (create-array-for-regression (model/prepare-data (utils/get-db) c/*draftking* names))\n      x (map #(nth % 6) points)\n      actual (map last points)]\n  (count points)\n  (view (charts/scatter-plot x actual :legend true))\n  )&quot; &quot;(create-model db c/*draftking* )&quot; &quot;(let [names (map :Name (data/init-players-data-draftking))\n      points (create-array-for-regression (model/prepare-data (utils/get-db) c/*draftking* names))\n      x (map #(nth % 5) points)\n      actual (map last points)]\n  (count points)\n  (view (charts/scatter-plot x actual :legend true))\n  )&quot; &quot;(let [names (map :Name (data/init-players-data-draftking))\n      points (create-array-for-regression (model/prepare-data (utils/get-db) c/*draftking* names))\n      x (map #(nth % 4) points)\n      actual (map last points)]\n  (count points)\n  (view (charts/scatter-plot x actual :legend true))\n  )&quot; &quot;(let [names (map :Name (data/init-players-data-draftking))\n      points (create-array-for-regression (model/prepare-data (utils/get-db) c/*draftking* names))\n      x (map #(nth % 3) points)\n      actual (map last points)]\n  (count points)\n  (view (charts/scatter-plot x actual :legend true))\n  )&quot; &quot;(let [names (map :Name (data/init-players-data-draftking))\n      points (create-array-for-regression (model/prepare-data (utils/get-db) c/*draftking* names))\n      x (map #(nth % 2) points)\n      actual (map last points)]\n  (count points)\n  (view (charts/scatter-plot x actual :legend true))\n  )&quot; &quot;(let [names (map :Name (data/init-players-data-draftking))\n      points (create-array-for-regression (model/prepare-data (utils/get-db) c/*draftking* names))\n      x (map #(nth % 1) points)\n      actual (map last points)]\n  (count points)\n  (view (charts/scatter-plot x actual :legend true))\n  )&quot; &quot;(mc/find-one-as-map db c/*collection* {:Name \&quot;James Harden\&quot;})&quot; &quot;(create-model db c/*draftking* (map :Name (data/init-players-data-draftking)))&quot; &quot;(+ )&quot; &quot;(mc/find-one-as-map db c/*collection* {:Name \&quot;Willie Cauley-Stein\&quot;})&quot; &quot;(linear/load-yesterday-proj-and-actual)&quot; &quot;(linear/load-yesterday-proj-and-actual db (data/init-players-data-draftking))&quot; &quot;(linear/create-cross-proj-model db (data/init-players-data-draftking))&quot; &quot;(linear/draw-proj-data)&quot; &quot;(linear/draw-proj-data db (data/init-players-data-draftking))&quot; &quot;(force-db-update)&quot; &quot;(ns rz.data)&quot; &quot;(load-csv-data lineup-csv-dk)&quot; &quot;(first (load-csv-data lineup-csv-dk))&quot; &quot;(nth (load-csv-data lineup-csv-dk) 2)&quot; &quot;(nth (load-csv-data lineup-csv-dk) 3)&quot; &quot;(nth (load-csv-data lineup-csv-dk) 4)&quot; &quot;(nth (load-csv-data lineup-csv-dk) 5)&quot; &quot;(nth (load-csv-data lineup-csv-dk) 6)&quot; &quot;(nth (load-csv-data lineup-csv-dk) 1)&quot; &quot;(pp/pprint *1)&quot; &quot;(first)&quot; &quot;(pp/pprint (first (load-csv-data players-csv-dk)))&quot; &quot;(pp/pprint (first (init-players-data-draftking2)))&quot; &quot;(ns rz.optimizer)&quot; &quot;(.format (java.text.SimpleDateFormat. \&quot;MM/dd/yyyy\&quot;) date)&quot; &quot;(.format (java.text.SimpleDateFormat. \&quot;MM/dd/yyyy\&quot;)  (java.util.Date.))&quot; &quot;(.format (java.text.SimpleDateFormat. \&quot;MM_dd_yyyy\&quot;)  (java.util.Date.))&quot; &quot;(rand-int)&quot; &quot;(rand-int 1000)&quot; &quot;(.format (java.text.SimpleDateFormat. \&quot;MM_dd_yyyy_mm_ss\&quot;)  (java.util.Date.))&quot; &quot;(.format (java.text.SimpleDateFormat. \&quot;MM_dd_yyyy_hh_mm\&quot;)  (java.util.Date.))&quot; &quot;(v)&quot; &quot;(pp/pprint (first (load-csv-data lineup-csv-dk)))&quot; &quot;(pp/pprint (first (data/load-csv-data lineup-csv-dk)))&quot; &quot;(:TeamAbbrev (data/init-players-data-draftking2))&quot; &quot;(keys (data/init-players-data-draftking2))&quot; &quot;(keys (first (data/init-players-data-draftking2)))&quot; &quot;(:ID (first (data/init-players-data-draftking2)))&quot; &quot;(:TeamAbbrev (first (data/init-players-data-draftking2)))&quot; &quot;((keyword \&quot;TeamAbbrev \&quot;) TeamAbbrev (first (data/init-players-data-draftking2)))&quot; &quot;((keyword \&quot;TeamAbbrev \&quot;) (first (data/init-players-data-draftking2)))&quot; &quot;(first (data/init-players-data-draftking2))&quot; &quot;(into map :a 2 :b 3)&quot; &quot;(into {} :a 2 :b 3)&quot; &quot;(into {} [:a 2 :b 3])&quot; &quot;(into {} [[:a 2] [:b 3]])&quot; &quot;(conj [1 2] 1)&quot; &quot;(conj [1 2] 3)&quot; &quot;(optimize-draftking-lineups)&quot;], :remote []}}</component>
</project>