<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1453501688937">{:repl-history {:ide [], :local [&quot;players-data&quot; &quot;(map :injury players-data)&quot; &quot;(create-probleam-file)&quot; &quot;(shell/ls)&quot; &quot;(shell/sh \&quot;ls\&quot; )&quot; &quot;(shell/sh \&quot;../Solver/cpplex/build/main\&quot; \&quot;../fantasy.problem\&quot;)&quot; &quot;(def ret *1)&quot; &quot;(:out ret)&quot; &quot;(keys ret)&quot; &quot;(:err ret)&quot; &quot;(:exit ret)&quot; &quot;(filter (split-lines (:out ret)))&quot; &quot;(filter (clojure.string/split-lines (:out ret)))&quot; &quot;(filter (fn [l] (re-find #\&quot; x_.*\&quot; l)) (clojure.string/split-lines (:out ret)))&quot; &quot;(clojure.string/split-lines (:out ret))&quot; &quot;(filter (fn [l] (re-find #\&quot;x_.*\&quot; l)) (clojure.string/split-lines (:out ret)))&quot; &quot;(def variables *1)&quot; &quot;(filter )&quot; &quot;(filter (fn [l] (re-find #\&quot;x_.*1\&quot; l)) (clojure.string/split-lines (:out ret)))&quot; &quot;(filter (fn [l] (re-find #\&quot;x_146:\\t\\t\\t1\&quot; l)) (clojure.string/split-lines (:out ret)))&quot; &quot;(filter (fn [l] (re-find #\&quot;x_146:\\\\t\\\\t\\\\t1\&quot; l)) (clojure.string/split-lines (:out ret)))&quot; &quot;(filter (fn [l] (re-find #\&quot;x_\&quot; l)) (clojure.string/split-lines (:out ret)))&quot; &quot;(filter (fn [l] (re-find #\&quot;x_[1-9]*\&quot; l)) (clojure.string/split-lines (:out ret)))&quot; &quot;(filter (fn [l] (re-find #\&quot;x_[1-9]*0\&quot; l)) (clojure.string/split-lines (:out ret)))&quot; &quot;(filter (fn [l] (re-find #\&quot;x_[1-9]*1\&quot; l)) (clojure.string/split-lines (:out ret)))&quot; &quot;(refind #\&quot;1\&quot; \&quot;x_144:\\t\\t\\t0\&quot;)&quot; &quot;(re-find #\&quot;1\&quot; \&quot;x_144:\\t\\t\\t0\&quot;)&quot; &quot;(re-find #\&quot;1\&quot; \&quot;x_44:\\t\\t\\t0\&quot;)&quot; &quot;(re-find #\&quot;\\t1\&quot; \&quot;x_144:\\t\\t\\t0\&quot;)&quot; &quot;(re-find #\&quot;\\t0\&quot; \&quot;x_144:\\t\\t\\t0\&quot;)&quot; &quot;(re-find #\&quot;x_[0-9]+\\t\\t\\t0\&quot; \&quot;x_144:\\t\\t\\t0\&quot;)&quot; &quot;(re-find #\&quot;x_[0-9]+\\t\\t\\t1\&quot; \&quot;x_144:\\t\\t\\t0\&quot;)&quot; &quot;(re-find #\&quot;x_[0-9]+:\\t\\t\\t1\&quot; \&quot;x_144:\\t\\t\\t0\&quot;)&quot; &quot;(re-find #\&quot;x_[0-9]+:\\t\\t\\t0\&quot; \&quot;x_144:\\t\\t\\t0\&quot;)&quot; &quot;(filter (fn [l] (re-find ##\&quot;x_[0-9]+:\\t\\t\\t1\&quot; l)) (clojure.string/split-lines (:out ret)))&quot; &quot;(filter (fn [l] (re-find #\&quot;x_[0-9]+:\\t\\t\\t1\&quot; l)) (clojure.string/split-lines (:out ret)))&quot; &quot;(def variable (filter (fn [l] (re-find #\&quot;x_[0-9]+:\\t\\t\\t1\&quot; l)) (clojure.string/split-lines (:out ret))))&quot; &quot;(def variables (filter (fn [l] (re-find #\&quot;x_[0-9]+:\\t\\t\\t1\&quot; l)) (clojure.string/split-lines (:out ret))))&quot; &quot;variables&quot; &quot;(re-match #\&quot;x_([0-9]+):\\t\\t\\t1\&quot; \&quot;x_25:\\t\\t\\t1\&quot;)&quot; &quot;(re-matches #\&quot;x_([0-9]+):\\t\\t\\t1\&quot; \&quot;x_25:\\t\\t\\t1\&quot;)&quot; &quot;(map (re-matches #\&quot;x_([0-9]+):\\t\\t\\t1\&quot; \&quot;x_25:\\t\\t\\t1\&quot;))&quot; &quot;(second (re-matches #\&quot;x_([0-9]+):\\t\\t\\t1\&quot; \&quot;x_25:\\t\\t\\t1\&quot;))&quot; &quot;(map #(second (re-matches #\&quot;x_([0-9]+):\\t\\t\\t1\&quot; %)) variables)&quot; &quot;(map #(read-string (second (re-matches #\&quot;x_([0-9]+):\\t\\t\\t1\&quot; %))) variables)&quot; &quot;(def indexes *1)&quot; &quot;(map #(nth players-data %) indexes)&quot; &quot;(def team (map #(nth players-data %) indexes))&quot; &quot;team&quot; &quot;(print-team team)&quot; &quot;(print-team2 team)&quot; &quot;(cpplex-solve)&quot; &quot;(first players-data)&quot;], :remote []}}</component>
</project>