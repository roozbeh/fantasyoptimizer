<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1453544586238">{:repl-history {:ide [], :local [&quot;(map (re-matches #\&quot;x_([0-9]+):\\t\\t\\t1\&quot; \&quot;x_25:\\t\\t\\t1\&quot;))&quot; &quot;(second (re-matches #\&quot;x_([0-9]+):\\t\\t\\t1\&quot; \&quot;x_25:\\t\\t\\t1\&quot;))&quot; &quot;(map #(second (re-matches #\&quot;x_([0-9]+):\\t\\t\\t1\&quot; %)) variables)&quot; &quot;(map #(read-string (second (re-matches #\&quot;x_([0-9]+):\\t\\t\\t1\&quot; %))) variables)&quot; &quot;(def indexes *1)&quot; &quot;(map #(nth players-data %) indexes)&quot; &quot;(def team (map #(nth players-data %) indexes))&quot; &quot;team&quot; &quot;(print-team team)&quot; &quot;(print-team2 team)&quot; &quot;(cpplex-solve)&quot; &quot;(first players-data)&quot; &quot;(+ 2 2)&quot; &quot;(optimize-lineups)&quot; &quot;(optimize-lineup)&quot; &quot;(ns rz.optimizer)&quot; &quot;(genetic/optimize-lineup)&quot; &quot;(format \&quot;%5d\&quot; 3)&quot; &quot;(format \&quot;%5.2g\&quot; 3.2)&quot; &quot;(format \&quot;%5.2g\&quot; 3.223333)&quot; &quot;(format \&quot;%5.3g\&quot; 3.223333)&quot; &quot;(format \&quot;%5.3g\&quot; 123.223333)&quot; &quot;(format \&quot;%6.3g\&quot; 123.223333)&quot; &quot;(format \&quot;%6g\&quot; 123.223333)&quot; &quot;(ns rz.optimizers.coinmp)&quot; &quot;(format \&quot;%6g\&quot; 123)&quot; &quot;(format \&quot;%6g\&quot; (doble 123))&quot; &quot;(format \&quot;%6g\&quot; (double 123))&quot; &quot;(format \&quot;%5g\&quot; (double 123))&quot; &quot;(format \&quot;%5.2g\&quot; (double 123))&quot; &quot;(format \&quot;%6.2g\&quot; (double 123))&quot; &quot;(format \&quot;%7.2g\&quot; (double 123))&quot; &quot;(format \&quot;%7.3g\&quot; (double 123))&quot; &quot;(format \&quot;%6.3g\&quot; (double 123))&quot; &quot;(format \&quot;%6.3g\&quot; (double 123.123))&quot; &quot;(format \&quot;%6.3g\&quot; (double 123.123erg))&quot; &quot;(format \&quot;%6.3g\&quot; (double 123.123123))&quot; &quot;(format \&quot;%7.3g\&quot; (double 123.123123))&quot; &quot;(format \&quot;%7.7g\&quot; (double 123.123123))&quot; &quot;(format \&quot;%6.6g\&quot; (double 123.123123))&quot; &quot;(format \&quot;%5.5g\&quot; (double 123.123123))&quot; &quot;(format \&quot;%2.5g\&quot; (double 123.123123))&quot; &quot;(format \&quot;%2.5g\&quot; (double 23.123123))&quot; &quot;(format \&quot;%3.5g\&quot; (double 23.123123))&quot; &quot;(format \&quot;%3.2g\&quot; (double 23.123123))&quot; &quot;(format \&quot;%5.2g\&quot; (double 23.123123))&quot; &quot;(format \&quot;%5.2f\&quot; (double 23.123123))&quot; &quot;(format \&quot;%6.2f\&quot; (double 23.123123))&quot; &quot;(shell/sh *coinmp-clp-binary* *mps-file* \&quot;-primals\&quot; \&quot;-solution\&quot; *solution-file*)&quot; &quot;(slurp *solution-file)&quot; &quot;(slurp *solution-file*)&quot; &quot;(filter (fn [l] (re-find #\&quot;[0-9]+:\\t\\t\\t1\&quot; l)) (string/split-lines out))&quot; &quot;(def out (slurp *solution-file*))&quot; &quot;(filter (fn [l] (re-find #\&quot;  [0-9]+ \&quot; l)) (string/split-lines out)&quot; &quot;(re-matches #\&quot;[a-9]+\&quot; \n            (filter (fn [l] (re-find #\&quot;  [0-9]+ \&quot; l)) (string/split-lines out)))&quot; &quot;(re-matches #\&quot;[0-9]+\&quot; \n            (filter (fn [l] (re-find #\&quot;  [0-9]+ \&quot; l)) (string/split-lines out)))&quot; &quot;(map #(re-matches #\&quot;[0-9]+\&quot; %))&quot; &quot;(map #(re-matches #\&quot;[0-9]+\&quot; %)\n     (filter (fn [l] (re-find #\&quot;  [0-9]+ \&quot; l)) (string/split-lines out)))&quot; &quot;(map #(re-matches #\&quot; [0-9]+\&quot; %)\n     (filter (fn [l] (re-find #\&quot;  [0-9]+ \&quot; l)) (string/split-lines out)))&quot; &quot;(map #(re-matches #\&quot;[0-9]\&quot; %)\n     (filter (fn [l] (re-find #\&quot;  [0-9]+ \&quot; l)) (string/split-lines out)))&quot; &quot;\n     (filter (fn [l] (re-find #\&quot;  [0-9]+ \&quot; l)) (string/split-lines out))&quot; &quot;(map #(re-matches #\&quot; *[0-9]\&quot; %)\n     (filter (fn [l] (re-find #\&quot;  [0-9]+ \&quot; l)) (string/split-lines out)))&quot; &quot;(re-matches #\&quot;[0-9]\&quot; \&quot;123\&quot;)&quot; &quot;(re-matches #\&quot;[0-9]*\&quot; \&quot;123\&quot;)&quot; &quot;(re-matches #\&quot;[0-9]+\&quot; \&quot;123\&quot;)&quot; &quot;(re-matches #\&quot;[0-9]+\&quot; \&quot;  123\&quot;)&quot; &quot;(re-matches #\&quot;.*[0-9]+\&quot; \&quot;  123\&quot;)&quot; &quot;(re-matches #\&quot;.*([0-9]+)\&quot; \&quot;  123\&quot;)&quot; &quot;(re-matches #\&quot; *([0-9]+)\&quot; \&quot;  123\&quot;)&quot; &quot;(re-matches #\&quot;[ ]*([0-9]+)\&quot; \&quot;  123\&quot;)&quot; &quot;(map #(re-matches #\&quot;[ ]*([0-9]+)\&quot; %)\n     (filter (fn [l] (re-find #\&quot;  [0-9]+ \&quot; l)) (string/split-lines out)))&quot; &quot;(re-matches #\&quot;[ ]*([0-9]+)\&quot; \&quot;     75 X0075                  1                       0\&quot;)&quot; &quot;(re-matches #\&quot;[ ]*([0-9]+).*\&quot; \&quot;     75 X0075                  1                       0\&quot;)&quot; &quot;(map #(re-matches #\&quot;[ ]*([0-9]+).*\&quot; %)\n     (filter (fn [l] (re-find #\&quot;  [0-9]+ \&quot; l)) (string/split-lines out)))&quot; &quot;(coinmp-solve)&quot; &quot;(string/split-lines out)&quot; &quot;(create-mps-file)&quot; &quot;(shell/sh *lpsolve-binary* \&quot;-mps\&quot; *mps-file*)&quot; &quot;(:out *1)&quot; &quot;(def out *1)&quot; &quot;(filter (fn [l] (re-find #\&quot;  [0-9]+ \&quot; l)) (string/split-lines out))&quot; &quot;(filter (fn [l] (re-find #\&quot;[0-9]+\&quot; l)) (string/split-lines out))&quot; &quot;(filter (fn [l] (re-find #\&quot;X[0-9][0-9][0-9][0-9][ ]+1\&quot; l)) (string/split-lines out))&quot; &quot;(def variables *1)&quot; &quot;(map #(read-string (second (re-matches #\&quot;[ ]*([0-9]+).*\&quot; %))) variables)&quot; &quot;(map #(read-string (second (re-matches #\&quot;([0-9]+)[ ]*1\&quot; %))) variables)&quot; &quot;variables&quot; &quot;(map #(re-matches #\&quot;X([0-9]+)[ ]*1\&quot; %) variables)&quot; &quot;(map #(second (re-matches #\&quot;X([0-9]+)[ ]*1\&quot; %)) variables)&quot; &quot;(map #(read-string (second (re-matches #\&quot;X([0-9]+)[ ]*1\&quot; %))) variables)&quot; &quot;(map #(Integer/parseInt (second (re-matches #\&quot;X([0-9]+)[ ]*1\&quot; %))) variables)&quot; &quot;(proj/get-rotowires-projections)&quot; &quot;data/players-csv&quot; &quot;(io/reader players-csv)&quot; &quot;(io/reader data/players-csv)&quot; &quot;(csv/read-csv (io/reader data/players-csv))&quot; &quot;(data/init-players-data)&quot; &quot;(count *1)&quot; &quot;(count players-data)&quot; &quot;(def players-data\n         (data/add-rotowires-projection\n           (filter #(not (= \&quot;O\&quot; (:injury %))) (data/init-players-data))))\n&quot; &quot;(lpsolve-solve)&quot;], :remote []}}</component>
</project>